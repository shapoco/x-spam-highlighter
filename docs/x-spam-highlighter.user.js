// ==UserScript==
// @name        X Spam Highlighter
// @namespace   https://github.com/shapoco/x-spam-highlighter/
// @match       https://x.com/*
// @grant       none
// @version     1.0.17
// @author      Shapoco
// @description „Éï„Ç©„É≠„ÉØ„ÉºË¶ß„Åß„Çπ„Éë„É†„Å£„ÅΩ„ÅÑ„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÂº∑Ë™øË°®Á§∫„Åó„Åæ„Åô
// @supportURL  https://github.com/shapoco/x-spam-highlighter/
// @homepageURL https://github.com/shapoco/x-spam-highlighter/
// @updateURL   https://shapoco.github.io/x-spam-highlighter/x-spam-highlighter.user.js
// @downloadURL https://shapoco.github.io/x-spam-highlighter/x-spam-highlighter.user.js
// ==/UserScript==

const PROCESS_INTERVAL_MS = 300;
const KEYWORD_BACKGROUND_COLOR = 'rgba(255, 255, 0, 0.25)';

const followButtonDataIdRegex = /(\d+)-(un)?(follow|block)/;

const REGEX_AGE = /\b[1-3]\d(Ê≠≥|Êâç|age|„Åï„ÅÑ|‚Üë|‚Üì|[Âè∞‰ª£]([ÂâçÂæå]Âçä)?)|„Ç¢„É©(„Çµ„Éº|„Éï„Ç©„Éº|„Éï„Ç£„Éï)/g;
const REGEX_LENGTH = /\b1[3-8]\d+(cm|„Çª„É≥„ÉÅ|‚îÇ)/g;
const REGEX_BUST = /\b[A-Z](„Ç´„ÉÉ„Éó|cup)/g;

// Ë©ï‰æ°„É´„Éº„É´
const rules = [
//{ regexes:[/„ÅÇ/g], penalty:100}, // „ÉÜ„Çπ„ÉàÁî®
  { regexes:[/„ÅäÈáë|ÁèæÈáë|\d*‰∏áÂÜÜ/g, /ÈÖçÂ∏É|ÈÖç„Çä|ÈÖç„Çã|ÈÖç„Å£[„Å¶„Åü]?|„Éó„É¨„Çº„É≥„Éà|ÂàÜÈÖç/g], penalty:50},
  { regexes:[/„Å≥„Çì„Åº„ÅÜ|Ë≤ß‰πè|Ë≤ßÂõ∞|Â∫ïËæ∫/g, /Êàê„Çä?‰∏ä„Åå?„Çä/g], penalty:50},
  { regexes:[/(Ê∞ó„Å´„Å™((„Å£„Å¶)?„Çã|„Å£„Å°„ÇÉ„ÅÜ)|ËààÂë≥„ÅÆ?„ÅÇ„Çã|„Å°„Çá„Å£„Å®Â•Ω„Åç„Å™?)([Áî∑Â•≥][ÊÄßÂ≠ê]|„Åä(ÂÖÑ|„Å´[„ÅÑ„ÅÉ]|Âßâ|„Å≠[„Åà„Åá])„Åï„Çì)/g], penalty:50},
  { regexes:[/„ÅäËøé„ÅàË°å„Åç„Åæ„Åô/g], penalty:20},
  { regexes:[/„Çª„Éï[„É¨Âèã]/g], penalty:20},
  { regexes:[/„Éû„É≥Âá∏/g], penalty:20},
  { regexes:[/(„Éë„Éë|„Éû„Éû)Ê¥ª/g], penalty:20},
  { regexes:[/(Â§ß‰∫∫|„Ç™„Éà„Éä)„ÅÆÈñ¢‰øÇ?/g], penalty:20},
  { regexes:[/‚Äª„ÅäÈáë(„ÅÆÈñ¢‰øÇ|„Å®„Åã)(ËààÂë≥|„Åç„Çá[„ÅÜ„Éº]„Åø|[Ê¨≤„Åª]„Åó„Åè)[ÁÑ°„Å™][„ÅÑ„ÅÉ]„ÅÆ„Åß/g], penalty:20},
  { regexes:[/‰∏çÂÄ´/g], penalty:20},
  { regexes:[REGEX_AGE, REGEX_LENGTH], penalty:20},
  { regexes:[REGEX_AGE, REGEX_BUST], penalty:20},
  { regexes:[REGEX_LENGTH, REGEX_BUST], penalty:20},
  { regexes:[/„Ç™„Éä„Éã„Éº|Ëá™ÊÖ∞|„Ç™„Éä„Éõ(„Éº„É´)?/g], penalty:20},
  { regexes:[/„Ç™„ÉäÂãïÁîª|ÂÜôÁúü?/g], penalty:20},
  { regexes:[/„Åä„Å£„Å±„ÅÑ|„Åæ„Çì„Åì|„ÇØ„É™(„Éà„É™„Çπ|Ê¥æ)|„Ç¢„Éä„É´|Âá¶Â•≥/g], penalty:20},
  { regexes:[/„Éö„Éã„Çπ|„Å°„Çì„Å°„Çì|„Å°„Çì„Åì|Á´•Ë≤û/g], penalty:20},
  { regexes:[/„Çª„ÉÉ„ÇØ„Çπ|\bsex\b|Â§ú„ÅÆÂñ∂„Åø/g], penalty:20},
  { regexes:[/„Éï„Çß„É©(„ÉÅ„Ç™)?/g], penalty:20},
  { regexes:[/ÊîæÂ∞ø/g], penalty:20},
  { regexes:[/È¶ñ[Á∑†Áµû]„ÇÅ/g], penalty:20},
  { regexes:[/È®é‰πó‰Ωç/g], penalty:20},
  { regexes:[/„Ç®„É≠„ÉÜ„É≠„É™„Çπ„Éà/g], penalty:20},
  { regexes:[/Â§ú„Å™„ÇâÊôÇÈñì„ÅÇ„Çä„Åæ„Åô/g], penalty:20},
  { regexes:[/Âø´Ê•Ω/g], penalty:10},
  { regexes:[/Âø´ÊÑüÁ†îÁ©∂/g], penalty:10},
  { regexes:[/(ÊÄß|„Åõ[„Éº„ÅÑ„ÅÉ])(Ê¨≤|[„Çà„Çá]„Åè)/g], penalty:20},
  { regexes:[/Áó¥Êº¢/g], penalty:10},
  { regexes:[/line\.me/g], penalty:10},
  { regexes:[/„Ç®„É≠„ÅÑ?|\bH„Å™|„Ç®„ÉÉ?„ÉÅ„Å™?|„Åà„Å£?„Å°[„ÅÑ„ÅÉ]?|„Åà„Å°„Åà„Å°|„Çπ„Ç±„Éô/g], penalty:10},
  { regexes:[/\b[\d,]+‰∏áÂÜÜ/g], penalty:10},
  { regexes:[/\b[\d,]+ÂÑÑÂÜÜ?/g], penalty:10},
  { regexes:[/\d*Á§æ„Çí?ÁµåÂñ∂/g], penalty:10},
  { regexes:[/\bLINE\b/g], penalty:10},
  { regexes:[/Âôõ„Åæ„Çå|Êîª„ÇÅ„Çâ„Çå/g], penalty:10},
  { regexes:[/„É§„É™„Åü„ÅÑ/g], penalty:10},
  { regexes:[/„É†„É©„É†„É©/g], penalty:10},
  { regexes:[/ÂΩπ„Å´[Á´ã„Åü]„Å°„Åü(„ÅÑ|„Åè„Å¶)/g], penalty:10},
  { regexes:[/\bFIRE\b/g], penalty:10},
  { regexes:[/[Ë¶ã„Åø]„Åõ[Âêà„ÅÇ]„ÅÑ|[Ë¶ã„Åø]„Åõ([Âêà„ÅÇ]„ÅÑ)?„Å£„Åì/g], penalty:10},
  { regexes:[/„Éï„Ç©„É≠„Éê/g, /(üíØ|100)[%ÔºÖ]?/g], penalty:10},
  { regexes:[/Âá∫‰ºö(„ÅÑ|„Åà„Çã)|‰ºö„Åà„Çã?/g], penalty:10},
  { regexes:[/„Çµ„É≠„É≥/g], penalty:10},
  { regexes:[/„Çª„Éü„Éä„Éº|Ë¨õÂ∫ß|Â°æ/g], penalty:10},
  { regexes:[/(Ë£è|„Ç¶„É©)(Âû¢|„Ç¢„Ç´)/g], penalty:10},
  { regexes:[/ÈÅéÊøÄ„Å™?/g], penalty:10},
  { regexes:[/„Éï„Çß„ÉÅ/g], penalty:10},
  { regexes:[/ÊäΩÈÅ∏/g], penalty:10},
  { regexes:[/ÂΩìÈÅ∏/g], penalty:10},
  { regexes:[/Á®º(„Åí[„Çã„Å∞]|„Åê|„ÅÑ[„Å†„Åß])/g], penalty:10},
  { regexes:[/ÂÑ≤(„Åã(„Çã|„Çä|„Å£„Åü)|„Åë[„Åü„Å¶]?)/g], penalty:10},
  { regexes:[/Â£≤„Çä?‰∏ä„Åí?|ÂèéÁõä|Âà©Áõä/g], penalty:10},
  { regexes:[/ÁàÜÁõä/g], penalty:10},
  { regexes:[/Â§âÊÖã/g], penalty:10},
  { regexes:[/ÁßòÂØÜÂé≥ÂÆà/g], penalty:10},
  { regexes:[/„Éó„É¨„Ç§„Åå(„Åó„Åü„ÅÑ|[„ÅôÂ•Ω]„Åç)/g], penalty:10},
  { regexes:[/„Ç´„Ç∏„É•„Ç¢„É´„Éë„Éº„Éà„Éä„Éº/g], penalty:10},
  { regexes:[/„Åä[„Åò„Å∞]„Åï„Çì/g, /[„ÅôÂ•Ω]„Åç/g], penalty:5},
  { regexes:[/„Çπ„Éà„É¨„ÇπÁô∫Êï£/g], penalty:5},
  { regexes:[/„É©„Ç§„É≥/g], penalty:5},
  { regexes:[/\bDM\b|„ÉÅ„É£„ÉÉ„Éà|„Éà„Éº„ÇØ|ÈÄöË©±|„É°„ÉÉ„Çª|ÔæíÔΩØÔΩæ/g], penalty:5},
  { regexes:[/ÈÄ£Áµ°ÂÖà‰∫§Êèõ/g], penalty:5},
  { regexes:[/ÁâπÂà•„Å™(ÂèãÈÅî|Âèã„Å†„Å°|„Å®„ÇÇ„Å†„Å°)/g], penalty:5},
  { regexes:[/ÊäïË≥á/g], penalty:5},
  { regexes:[/„Éê„Ç§„Éä„É™„Éº/g], penalty:5},
  { regexes:[/‰ªÆÊÉ≥ÈÄöË≤®/g], penalty:5},
  { regexes:[/ÁÇ∫Êõø|\bFX\b/g], penalty:5},
  { regexes:[/Ë≥áÁî£/g], penalty:5},
  { regexes:[/ÈÅãÁî®/g], penalty:5},
  { regexes:[/ÈÅîÊàê/g], penalty:5},
  { regexes:[/Â•≥?Á§æÈï∑|„Ç≥„É≥„Çµ„É´(„Çø„É≥„Éà)?|\bOL\b|ÁúãË≠∑(Â∏´|Â≠¶Áîü)|[Êñ∞‰∫∫]Â¶ª|„Çª„É¨„Éñ„Éû„Éû|Â§ßÂ≠¶\dÂπ¥Áîü?|„Å†„ÅÑ„Åå„Åè„Åõ„Éº/g], penalty:5},
  { regexes:[/[Áî∑Â•≥]Â≠ê/g], penalty:5},
  { regexes:[REGEX_AGE], penalty:5},
  { regexes:[/Âú∞Êñπ|Âá∫Ë∫´|23Âå∫Âú®‰Ωè/g], penalty:5},
  { regexes:[/ÊÄßÊ†º/g, /\b[MS]\b/g], penalty:5},
  { regexes:[/(‰∏ã|„Ç∑„É¢)„Éç„Çø/g, /[„ÅôÂ•Ω]„Åç/g], penalty:5},
  { regexes:[/„Éê„Éä„Éä|üçå/g], penalty:5},
  { regexes:[/ÂãüÈõÜ|Âèó„Åë?‰ªò„Åë?/g], penalty:5},
  { regexes:[/Ëµ∑Ê•≠/g], penalty:5},
  { regexes:[/ÊÅãÊÑõ/g], penalty:5},
  { regexes:[/Èõ¢Â©ö/g], penalty:5},
  { regexes:[/„Éá„Éº„Éà/g], penalty:5},
  { regexes:[/Êù°‰ª∂„Åå?Âêà„Åà„Å∞/g], penalty:5},
  { regexes:[/„Éë„Éº„Éà„Éä„Éº|„ÅäÁõ∏Êâã/g], penalty:5},
  { regexes:[/„É°„É≥„Éò„É©/g], penalty:5},
  { regexes:[/(ÂèãÈÅî|Âèã„Å†„Å°|„Å®„ÇÇ„Å†„Å°)„Å´„Å™„Å£„Å¶/g], penalty:5},
  { regexes:[/Áµ°„Åø„Å´Ë°å„Åè/g], penalty:5},
  { regexes:[/„Éï„Ç©„É≠„Éº„Åó„Å¶|„Éï„Ç©„É≠„É™„ÉÑ|Áµ°„Çì„Åß|„Åì„Å£„Å°[Êù•„Åç]„Å¶/g], penalty:5},
  { regexes:[/Ë≤ß‰πè|Â∫ïËæ∫|‰ΩéË≥ÉÈáë/g], penalty:5},
  { regexes:[/[Âπ¥Êúà]Âèé|ÊâãÂèñ„Çä?/g], penalty:5},
  { regexes:[/Âè£Â∫ß/g], penalty:5},
  { regexes:[/„É¨„ÇØ„ÉÅ„É£„Éº|„ÅäÊïô„Åà„Åó„Åæ„Åô/g], penalty:5},
  { regexes:[/[‚ù§ü©∑üß°üíõüíöüíôü©µüíúü§éüñ§ü©∂ü§çüíòüíìüíîüíïüíñüíóüíùüíûüíü‚ù£üòçüòòüòªüíëüíèüíåüè©üíí]/g], penalty:5},
].map(rule => {
  rule.regexes = rule.regexes.map(regex => {
    const tmp = regex.toString();
    return new RegExp(toHiragana(tmp.substring(1, tmp.length - 2)), 'g');
  });
  return rule;
});

// Ê§úÁ¥¢ÈÅø„ÅëÊñáÂ≠ó
const searchObstCharRegex = /[ /\\.\|]/g;
const searchObstCharRegexStr = (function(){
  const tmp = searchObstCharRegex.toString();
  return tmp.substring(1, tmp.length - 2);
})();

var lastLocation = null;
var followButtons = [];
var followerListRoot = null;
var finishedElems = [];

window.onload = function() {
  const body = document.querySelector('body');
  const observer = new MutationObserver(function(mutations) {
    if (lastLocation != document.location.href) {
      lastLocation = document.location.href;
      followButtons = [];
      followerListRoot = null;
      finishedElems = [];
    }
  });

  observer.observe(body, {
    childList: true,
    subtree: true,
  });
};

setTimeout(scanUsers, PROCESS_INTERVAL_MS);

function scanUsers() {
  if (document.location.href.match(/^https:\/\/(twitter|x)\.com\/\w+\/\w*followers/)) {
    // „Éï„Ç©„É≠„ÉØ„Éº‰∏ÄË¶ß„Åß„ÅÆ„ÅøÂá¶ÁêÜ„ÇíÂÆüË°å„Åô„Çã
    scanUsersInner();
    setTimeout(scanUsers, PROCESS_INTERVAL_MS);
  }
  else {
    setTimeout(scanUsers, 1000);
  }
}

function scanUsersInner() {
  // „Éï„Ç©„É≠„Éº„Éú„Çø„É≥„ÇíÊé¢„Åô
  const newFollowButtons =
        Array.from(document.querySelectorAll('button'))
        .filter(isFollowButton);
  followButtons = followButtons.concat(newFollowButtons);
  if (followButtons.length < 2) return;

  // „Éï„Ç©„É≠„Éº„Éú„Çø„É≥„ÅÆÂÖ±ÈÄö„ÅÆË¶™Ë¶ÅÁ¥†„ÇíÊé¢„Åô
  if (!followerListRoot) {
    followerListRoot = findCommonParent(followButtons[0], followButtons[1]);
    if (!followerListRoot) {
      console.error('Root element not found.');
    }
  }
  if (!followerListRoot) return;

  Array.from(followerListRoot.children).forEach(processUser);
}

// Ë¶ÅÁ¥†„Åå„Éï„Ç©„É≠„Éº„Éú„Çø„É≥„Åã„Å©„ÅÜ„Åã„ÇíËøî„Åô
function isFollowButton(btn) {
  // „Éï„Ç©„É≠„Éº„Éú„Çø„É≥„Åß„Å™„ÅÑ„ÇÇ„ÅÆ„ÅØÈô§Â§ñ
  if (!btn.dataset.testid) return false;
  if (!btn.dataset.testid.match(followButtonDataIdRegex)) return false;

  // Êó¢Áü•„ÅÆ„Éú„Çø„É≥„ÅØÈô§Â§ñ
  if (btn in followButtons) return false;

  // „Éì„É•„Éº„Éù„Éº„Éà„ÅÆÁ´Ø„Å´„ÅÇ„ÇãË¶ÅÁ¥†„ÅØÈô§Â§ñ
  const vw = window.innerWidth;
  const rect = btn.getBoundingClientRect();
  if (rect.right < vw / 2 || vw * 3 / 4 < rect.left) return false;

  return true;
}

// Ë¶ÅÁ¥† a „Å® b „ÅÆÂÖ±ÈÄö„ÅÆË¶™Ë¶ÅÁ¥†„ÇíËøî„Åô
function findCommonParent(a, b) {
  var parents = [];
  while (a.parentElement) {
    parents.push(a.parentElement);
    a = a.parentElement;
  }
  while (b.parentElement) {
    if (parents.includes(b.parentElement)) {
      return b.parentElement;
    }
    b = b.parentElement;
  }
  return null;
}

// „É¶„Éº„Ç∂ÊØé„ÅÆÂá¶ÁêÜ
function processUser(elm) {
  // Âá¶ÁêÜÊ∏à„Åø„ÅÆË¶ÅÁ¥†„ÅØÈô§„Åè
  if (finishedElems.includes(elm)) return;
  finishedElems.push(elm);

  const text = normalizeForHitTest(getTextContentWithAlt(elm));

  // Ë©ï‰æ°
  var wordsToBeHighlighted = [];
  var penalty = 0;
  rules.forEach(rule => {
    var allMatched = true;
    var matchedWords = [];

    // „É´„Éº„É´„Å´ÂÆöÁæ©„Åï„Çå„ÅüÂÖ®„Å¶„ÅÆÊ≠£Ë¶èË°®Áèæ„Å´„Éû„ÉÉ„ÉÅ„Åô„Çã„ÅãÁ¢∫Ë™ç„Åô„Çã
    rule.regexes.forEach(regex => {
      const matches = text.match(regex);
      if (matches) {
        matches.forEach(m => {
          if (!wordsToBeHighlighted.includes(m) && !matchedWords.includes(m)) {
            matchedWords.push(m);
          }
        });
      }
      else {
        allMatched = false;
      }
    });

    if (allMatched) {
      // ÂÖ®„Å¶„Å´„Éû„ÉÉ„ÉÅ„Åó„Åü„Çâ„Çπ„Ç≥„Ç¢„ÇíÂä†ÁÆó
      penalty += rule.penalty;
      wordsToBeHighlighted = wordsToBeHighlighted.concat(matchedWords);
    }
  });

  // „Ç≠„Éº„ÉØ„Éº„Éâ„Éè„Ç§„É©„Ç§„Éà
  wordsToBeHighlighted.forEach(kwd => {
    highlightKeyword(elm, kwd);
  });

  if (penalty <= 10) return;

  // „É¶„Éº„Ç∂„ÅÆ„Éè„Ç§„É©„Ç§„Éà
  const MAX_ALPHA = 0.5;
  const alpha = Math.max(0, Math.min(MAX_ALPHA, penalty / 100));
  elm.style.backgroundColor = `rgba(255, 0, 0, ${alpha})`;
}

function highlightKeyword(elm, kwd) {
  const children = Array.from(elm.childNodes);
  children.forEach(child => {
    if (child.nodeType == Node.TEXT_NODE) {
      // „ÉÜ„Ç≠„Çπ„ÉàË¶ÅÁ¥†
      const childText = child.nodeValue;
      if (normalizeForHitTest(childText).includes(kwd)) {
        const span = document.createElement('span');
        span.innerHTML = replaceTextContent(childText, kwd);
        const frag = document.createDocumentFragment();
        frag.appendChild(span);
        child.parentNode.replaceChild(frag, child);
      }
    }
    else {
      // „ÉÜ„Ç≠„Çπ„ÉàË¶ÅÁ¥†‰ª•Â§ñ
      const childText = child.textContent;
      if (normalizeForHitTest(childText).includes(kwd)) {
        if (childText == child.innerHTML) {
          child.innerHTML = replaceTextContent(childText, kwd);
        }
        else {
          highlightKeyword(child, kwd);
        }
      }
    }
  });
}

function replaceTextContent(text, kwd) {
  // Ê§úÁ¥¢Áî®„Å´Ê≠£Ë¶èÂåñ
  const normText = normalizeForReplace(text);

  // Ê§úÁ¥¢ÈÅø„ÅëÊñáÂ≠ó„ÇíËÄÉÊÖÆ„Åó„Å¶Ê§úÁ¥¢Áî®Ê≠£Ë¶èË°®Áèæ‰ΩúÊàê
  const kwdChars = kwd.split('').map(c => c.replaceAll(/([\*\+\.\?\{\}\(\)\[\]\^\$\-\|\/])/g, '\\$1'));
  const kwdRegex = new RegExp(`(${kwdChars.join(searchObstCharRegexStr + '?')})`, 'dg');

  // Ê§úÁ¥¢Áî®ÊñáÂ≠óÂàó„ÅßÊñáÂ≠ó‰ΩçÁΩÆ„ÇíÊ§úÂá∫„Åó„Å¶„ÄÅÁΩÆÊèõ„ÅØ„Ç™„É™„Ç∏„Éä„É´„ÅÆÊñáÂ≠óÂàó„Çí‰Ωø„Å£„Å¶Ë°å„ÅÜ
  var html = '';
  var end = 0;
  var m;
  while (!!(m = kwdRegex.exec(normText))) {
    const start = kwdRegex.lastIndex - m[0].length;
    html += text.substring(end, start);
    end = kwdRegex.lastIndex;
    html += `<span style="background-color: ${KEYWORD_BACKGROUND_COLOR};">${text.substring(start, end)}</span>`;
  }
  html += text.substring(end);
  return html;
}

function normalizeForReplace(orig) {
  var ret = toNarrow(toHiragana(orig))
    .replaceAll(/[‚Äï‚îÄ]/g, '„Éº');
  console.assert(orig.length == ret.length);
  return ret;
}

function normalizeForHitTest(orig) {
  return normalizeForReplace(orig).replaceAll(searchObstCharRegex, '');
}

function toHiragana(orig) {
  const ret = orig.replaceAll(/[\u30a1-\u30f6]/g, m => String.fromCharCode(m.charCodeAt(0) - 0x60));
  console.assert(orig.length == ret.length);
  return ret;
}

function toNarrow(orig) {
  const ret = orig.replaceAll(/[Ôº°-Ôº∫ÔΩÅ-ÔΩöÔºê-Ôºô]/g, m => String.fromCharCode(m.charCodeAt(0) - 0xFEE0));
  console.assert(orig.length == ret.length);
  return ret;
}

// ÁîªÂÉè (emoji) „ÅÆ alt „ÇíÂê´„ÇÄ textContent
function getTextContentWithAlt(elm) {
  if (elm) {
    if (elm.nodeType === Node.TEXT_NODE) {
      return elm.nodeValue;
    }
    else if (elm.nodeType === Node.ELEMENT_NODE) {
      if (elm.tagName.toLowerCase() === 'img') {
        return elm.alt;
      }
      else {
        let text = '';
        for (let child of elm.childNodes) {
          text += getTextContentWithAlt(child);
        }
        return text;
      }
    }
  }
  return '';
}

